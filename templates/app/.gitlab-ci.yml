stages:
  - test
  - init
  - prepare
  - validate
  - plan
  - deploy


variables:
  TF_ROOT: ${CI_PROJECT_DIR}
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_PROJECT_NAME}
  TF_VAR_COMMIT_SHA: $CI_COMMIT_SHORT_SHA

build:
  needs: []
  stage: build
  image: nixos/nix
  script:
    - nix build --extra-experimental-features flakes --extra-experimental-features nix-command .#dockerImage
    - cp $(readlink result) result.tar.gz
  artifacts:
    paths:
      - result.tar.gz
    expire_in: 1 week
  cache:
    paths:
      - /nix/store

deploy-ecr:
  needs: [build]
  dependencies:
    - build
  stage: build
  image: docker:19.03.12
  script:
    - docker load < result.tar.gz
    - docker tag myapp:latest $IMAGE_TAG
    - apk update && apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - eval $(aws ecr get-login --no-include-email --region us-east-1)
    - docker push $IMAGE_TAG
    - echo $CI_COMMIT_SHORT_SHA
    - echo $IMAGE_TAG
  only:
    - master
 


init:
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/1.0
  stage: prepare
  needs: []
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform init

validate:
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/1.0
  stage: validate
  needs:
    - init
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform validate

plan:
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/1.0
  stage: plan
  needs:
    - validate
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

apply:
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/1.0
  stage: deploy
  needs:
    - plan
  environment:
    name: production
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform apply
  dependencies:
    - plan
  only:
    - main

